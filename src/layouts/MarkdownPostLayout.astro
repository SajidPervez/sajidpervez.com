---
import BaseLayout from "./BaseLayout.astro";
import Prose from "../components/Prose.astro";
import TOC from '../components/TOC.astro';
import { Image } from 'astro:assets';

const { frontmatter, content: { title }, headings, Content } = Astro.props;
---

<BaseLayout pageTitle={frontmatter.pageTitle}>
  <header>
    <!-- Title always at the top -->
    <h1 class="text-3xl font-bold text-center lg:text-left mb-4 prose">{frontmatter.title}</h1>
    <!-- Author and publish date -->
    <p class="text-gray-500 text-center lg:text-left mb-2">
      By {frontmatter.author} on {frontmatter.pubDate.toString()} 
    </p>

    <!-- Cover image -->
    {frontmatter.cover && (
      <Image 
        src={frontmatter.cover} 
        alt={frontmatter.altText} 
        class="w-full h-auto lg:w-[600px] lg:h-[600px] mb-4 mx-auto"
      />
    )}
   
    <!-- Tags -->
    <div class="tags text-center lg:text-left flex flex-wrap justify-center lg:justify-start gap-0">
      {frontmatter.tags.map((tag) => (
        <p class="inline-block tag">
          <a href={`/tags/${tag}`} class="text-blue-500 hover:text-blue-700">
            #{tag}
          </a>
        </p>
      ))}
    </div>


  </header>

  <!-- Responsive layout for content and TOC -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mt-2">
    <!-- TOC: Shown at the top for smaller screens, sidebar for larger screens -->
    {headings && headings.length > 0 && (
      <nav class="article-toc order-first lg:order-none lg:block lg:sticky lg:top-4 lg:mb-0">
        <h2 class="font-semibold text-lg mb-2 text-center lg:text-left">Table of Content</h2>
        <TOC headings={headings} />
      </nav>
    )}

    <!-- Main Content Area: Spans 2 columns on large screens -->
    <div class="col-span-2">
      <Prose>
        <slot />
      </Prose>
    </div>
  </div>
</BaseLayout>

<script>
  addIntersectionObserver();

  function addIntersectionObserver() {
    const observer = new IntersectionObserver((sections) => {
      console.log('sections', sections);
      sections.forEach((section) => {
        const heading = section.target.querySelector('h2, h3, h4, h5');
        if (!heading) return;
        const id = heading.getAttribute('id');

        // Get the link to this section's heading
        const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
        if (!link) return;

        // Add/remove the .active class based on whether the
        // section is visible
        const addRemove = section.intersectionRatio > 0 ? 'add' : 'remove';
        link.classList[addRemove]('active');
      });
    });

    document.querySelectorAll('.article-content section').forEach((section) => {
      observer.observe(section);
    });
  }
</script>
